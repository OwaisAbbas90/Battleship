@page "/"

@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row">
        <div class="col-sm-5">

        </div>
        <div class="col-sm-2">
            <button class="btn btn-lg btn-outline-warning text-center" @onclick="SetupBoard"><i class="fa fa-play"></i></button>
            <button class="btn btn-lg btn-outline-info text-center" @onclick="Reset"><i class="fa fa-random"></i></button>
        </div>
        <div class="col-sm-5">
            @*<button class="btn btn-lg btn-outline-warning text-center" @onclick="Reset"><i class="fa fa-refresh"></i></button>*@
        </div>

    </div>
</div>
<br />

<div class="container">
    <div class="row">
        <div class="col-sm-3">
            <img src="/css/Img/ship1.png" style="visibility:@active1;width:250px;height:100px" />
            <br />
            <img src="/css/Img/ship2.png" style="visibility:@active2;width:200px;height:100px" />
            <br />
            <img src="/css/Img/ship3.png" style="visibility:@active3;width:200px;height:100px" />
        </div>
        <div class="col-sm-6" style="visibility:@active">
            <table>
                <tr>
                    <td>
                    </td>
                    @for (int topRow = 65; topRow <= 74; topRow++)
                    {
                        char a = (char)topRow;
                        <td>
                            <button class="btn btn-primary custom disabled">@a</button>
                        </td>
                    }
                    <td>
                    </td>
                </tr>

                @for (int i = 0; i < 10; i++)
                {
                    int l = i + 1;
                    <tr>
                        <td>
                            <a class="btn btn-primary custom disabled">@l</a>
                        </td>
                        @for (int j = 0; j < 10; j++)
                        {
                            string n = i.ToString();
                            string x = j.ToString();
                            string idd = n + x;
                            int id = Convert.ToInt32(idd);
                            <td>
                                <button id=@idd class="btn btn-success custom" role="button" @onclick="@(e => Target(idd))">
                                    <i class="fa fa-question-circle" aria-hidden="true"></i>
                                </button>
                            </td>
                        }
                        <td>
                        </td>
                    </tr>
                }
            </table>
        </div>
        <div class="col-sm-3">
            <div class="row">
                INSTRUCTIONS
                <ul>
                    <li>
                        Press play button to setup the game
                    </li>
                    <li>
                        Press reset button to reset the game
                    </li>
                    <li>
                        Select the co-ordinate from board to target computer's ship
                    </li>
                    <li>
                        If it turns <button class="btn btn-danger" style="background-color:red" disabled></button> it's a 'HIT'
                    </li>
                    <li>
                        If it turns <button class="btn" disabled style="background-color:grey"></button> it's a 'MISS'
                    </li>
                </ul>
            </div>

        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @if (ships.Any())
                {
                    <h5 class="modal-title" id="exampleModalLongTitle">SUNK!</h5>
                }
                else
                {
                    <h5 class="modal-title" id="exampleModalLongTitle">Winner Winner Chicken Dinner!</h5>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @sunkMessage
            </div>
        </div>
    </div>
</div>
<!-- Modal -->


<div id="modal-backdrop" class="modal-backdrop-transparent modal-transition">
    <div id="vicBefore" class="before"></div>
    <div id="vicAfter" class="after"></div>
</div>

@code {
    private int currentCount = 0;
    private string active = "hidden", active1 = "hidden", active2 = "hidden", active3 = "hidden";
    private string disabled = "";
    private string sunkMessage = "";
    //private string gameStatus = "";
    private int r1, r2;
    Random r = new Random();

    public List<string> ship1 = new List<string>();
    public List<string> ship2 = new List<string>();
    public List<string> ship3 = new List<string>();
    public List<string> ships = new List<string>();

    private void SetupBoard()
    {

        ship1.Clear();
        ship2.Clear();
        ship3.Clear();
        ships.Clear();
        random(5);
        random(4);
        random(4);
        active1 = "visible";
        active2 = "visible";
        active3 = "visible";
        active = "visible";

    }

    private void Reset()
    {
        active = "hidden";
        active1 = "hidden";
        active2 = "hidden";
        active3 = "hidden";
        SetupBoard();
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("Win");

    }

    private void random(int ship)
    {

        r1 = r.Next(0, 9);
        if (ship == 5)
        {
            if (r1 >= 0 && r1 <= 5)
            {
                r2 = r.Next(0, 9);
                if (r2 >= 0 && r2 <= 5)
                {
                    int rrr = r.Next(1, 2);
                    if (rrr == 1)
                    {
                        if (CheckHorizontal(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawHorizontal(r1, r2, ship);
                        }
                    }
                    else
                    {
                        if (CheckVertical(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawVertical(r1, r2, ship);
                        }
                    }

                }
                else if (r2 >= 6 && r2 <= 9)
                {
                    if (CheckVertical(r1, r2, ship))
                    {
                        random(ship);
                    }
                    else
                    {
                        DrawVertical(r1, r2, ship);
                    }
                }

            }
            else if (r1 >= 6 && r1 <= 9)
            {
                r2 = r.Next(0, 4);

                if (CheckHorizontal(r1, r2, ship))
                {
                    random(ship);
                }
                else
                {
                    DrawHorizontal(r1, r2, ship);
                }

            }
        }
        else if (ship == 4)
        {


            if (r1 >= 0 && r1 <= 6)
            {
                r2 = r.Next(0, 9);
                if (r2 >= 0 && r2 <= 6)
                {
                    int rrr = r.Next(1, 2);
                    if (rrr == 1)
                    {
                        if (CheckHorizontal(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawHorizontal(r1, r2, ship);
                        }
                    }
                    else
                    {
                        if (CheckVertical(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawVertical(r1, r2, ship);
                        }
                    }

                }
                else if (r2 >= 7 && r2 <= 9)
                {
                    if (CheckVertical(r1, r2, ship))
                    {
                        random(ship);
                    }
                    else
                    {
                        DrawVertical(r1, r2, ship);
                    }
                }

            }
            else if (r1 >= 7 && r1 <= 9)
            {
                r2 = r.Next(0, 5);

                if (CheckHorizontal(r1, r2, ship))
                {
                    random(ship);
                }
                else
                {
                    DrawHorizontal(r1, r2, ship);
                }

            }

        }


    }

    private bool CheckVertical(int r1, int r2, int ship)
    {
        int a = r1; int b = r2;
        bool present = false;
        for (int i = 0; i < ship; i++)
        {
            if (ships.Contains(a.ToString() + b.ToString()))
            {
                present = true;
                break;
            }
            else
            {
                a += 1;
            }
        }
        return present;
    }

    private void DrawVertical(int r1, int r2, int ship)
    {
        for (int i = 0; i < ship; i++)
        {
            if (ship == 5)
            {
                ship1.Add(r1.ToString() + r2.ToString());
            }
            else
            {
                if (ship2.Count() < 4)
                {
                    ship2.Add(r1.ToString() + r2.ToString());
                }
                else
                {
                    ship3.Add(r1.ToString() + r2.ToString());
                }

            }
            ships.Add(r1.ToString() + r2.ToString());
            r1 += 1;
        }

    }

    private void DrawHorizontal(int r1, int r2, int ship)
    {

        for (int i = 0; i < ship; i++)
        {

            if (ship == 5)
            {
                ship1.Add(r1.ToString() + r2.ToString());
            }
            else
            {
                if (ship2.Count() < 4)
                {
                    ship2.Add(r1.ToString() + r2.ToString());
                }
                else
                {
                    ship3.Add(r1.ToString() + r2.ToString());
                }

            }
            ships.Add(r1.ToString() + r2.ToString());
            r2 += 1;
        }
    }

    private bool CheckHorizontal(int r1, int r2, int ship)
    {
        int a = r1; int b = r2;
        bool present = false;
        for (int i = 0; i < ship; i++)
        {
            if (ships.Contains(a.ToString() + b.ToString()))
            {
                present = true;
                break;
            }
            else
            {
                b += 1;
            }
        }
        return present;
    }

    private async Task Target(string id)
    {

        if (ships.Contains(id))
        {
            await JSRuntime.InvokeVoidAsync("Strike", id);
            int removeFromShips = ships.IndexOf(id);
            ships.RemoveAt(removeFromShips);
            if (ship1.Contains(id))
            {
                int removeFromindividual = ship1.IndexOf(id);
                ship1.RemoveAt(removeFromindividual);
                if (!ship1.Any())
                {
                    active1 = "hidden";
                    sunkMessage = "HMS Queen Elizabeth has been destroyed";
                    await JSRuntime.InvokeVoidAsync("Modal", "1");
                }
            }
            else if (ship2.Contains(id))
            {
                int removeFromindividual = ship2.IndexOf(id);
                ship2.RemoveAt(removeFromindividual);
                if (!ship2.Any())
                {
                    active2 = "hidden";
                    sunkMessage = "HMS Duncan has been destroyed";
                    await JSRuntime.InvokeVoidAsync("Modal", "1");

                }
            }
            else if (ship3.Contains(id))
            {
                int removeFromindividual = ship3.IndexOf(id);
                ship3.RemoveAt(removeFromindividual);
                if (!ship3.Any())
                {
                    active3 = "hidden";
                    sunkMessage = "HMS Defender has been destroyed";
                    await JSRuntime.InvokeVoidAsync("Modal", "1");

                }
            }

            if (!ships.Any())
            {

                sunkMessage = "Congrats, Your waters are clear from enemy ships";
                await JSRuntime.InvokeVoidAsync("Modal", "2");

            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Miss", id);
        }
    }
}

