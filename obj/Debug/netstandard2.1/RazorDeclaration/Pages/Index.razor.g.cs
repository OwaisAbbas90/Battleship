// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp5.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using BlazorApp5;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\owais\Desktop\Battleship\_Imports.razor"
using BlazorApp5.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 154 "C:\Users\owais\Desktop\Battleship\Pages\Index.razor"
       
    private int currentCount = 0;
    private string active ="hidden";
    private string active1 = "hidden", active2 = "hidden", active3 = "hidden";
    private string disabled = "";
    private string sunkMessage = "";
    private string gameStatus = "";
    private int r1, r2;
    Random r = new Random();

    public List<string> ship1 = new List<string>();
    public List<string> ship2 = new List<string>();
    public List<string> ship3 = new List<string>();
    public List<string> ships = new List<string>();

    private void SetupBoard()
    {

        ship1.Clear();
        ship2.Clear();
        ship3.Clear();
        ships.Clear();
        random(5);
        random(4);
        random(4);
        active1 = "visible";
        active2 = "visible";
        active3 = "visible";
        active = "visible";

    }

    private void Reset()
    {
        active = "hidden";
        active1 = "hidden";
        active2 = "hidden";
        active3 = "hidden";
        SetupBoard();
        ((IJSInProcessRuntime)JSRuntime).InvokeVoid("Win");

    }

    private void random(int ship)
    {

        r1 = r.Next(0, 9);
        if (ship == 5)
        {
            if (r1 >= 0 && r1 <= 5)
            {
                r2 = r.Next(0, 9);
                if (r2 >= 0 && r2 <= 5)
                {
                    int rrr = r.Next(1, 2);
                    if (rrr == 1)
                    {
                        if (CheckHorizontal(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawHorizontal(r1, r2, ship);
                        }
                    }
                    else
                    {
                        if (CheckVertical(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawVertical(r1, r2, ship);
                        }
                    }

                }
                else if (r2 >= 6 && r2 <= 9)
                {
                    if (CheckVertical(r1, r2, ship))
                    {
                        random(ship);
                    }
                    else
                    {
                        DrawVertical(r1, r2, ship);
                    }
                }

            }
            else if (r1 >= 6 && r1 <= 9)
            {
                r2 = r.Next(0, 4);

                if (CheckHorizontal(r1, r2, ship))
                {
                    random(ship);
                }
                else
                {
                    DrawHorizontal(r1, r2, ship);
                }

            }
        }
        else if (ship == 4)
        {


            if (r1 >= 0 && r1 <= 6)
            {
                r2 = r.Next(0, 9);
                if (r2 >= 0 && r2 <= 6)
                {
                    int rrr = r.Next(1, 2);
                    if (rrr == 1)
                    {
                        if (CheckHorizontal(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawHorizontal(r1, r2, ship);
                        }
                    }
                    else
                    {
                        if (CheckVertical(r1, r2, ship))
                        {
                            random(ship);
                        }
                        else
                        {
                            DrawVertical(r1, r2, ship);
                        }
                    }

                }
                else if (r2 >= 7 && r2 <= 9)
                {
                    if (CheckVertical(r1, r2, ship))
                    {
                        random(ship);
                    }
                    else
                    {
                        DrawVertical(r1, r2, ship);
                    }
                }

            }
            else if (r1 >= 7 && r1 <= 9)
            {
                r2 = r.Next(0, 5);

                if (CheckHorizontal(r1, r2, ship))
                {
                    random(ship);
                }
                else
                {
                    DrawHorizontal(r1, r2, ship);
                }

            }

        }


    }

    private bool CheckVertical(int r1, int r2, int ship)
    {
        int a = r1; int b = r2;
        bool present = false;
        for (int i = 0; i < ship; i++)
        {
            if (ships.Contains(a.ToString() + b.ToString()))
            {
                present = true;
                break;
            }
            else
            {
                a += 1;
            }
        }
        return present;
    }

    private void DrawVertical(int r1, int r2, int ship)
    {
        for (int i = 0; i < ship; i++)
        {
            if (ship == 5)
            {
                ship1.Add(r1.ToString() + r2.ToString());
            }
            else
            {
                if (ship2.Count() < 4)
                {
                    ship2.Add(r1.ToString() + r2.ToString());
                }
                else
                {
                    ship3.Add(r1.ToString() + r2.ToString());
                }

            }
            ships.Add(r1.ToString() + r2.ToString());
            r1 += 1;
        }

    }

    private void DrawHorizontal(int r1, int r2, int ship)
    {

        for (int i = 0; i < ship; i++)
        {

            if (ship == 5)
            {
                ship1.Add(r1.ToString() + r2.ToString());
            }
            else
            {
                if (ship2.Count() < 4)
                {
                    ship2.Add(r1.ToString() + r2.ToString());
                }
                else
                {
                    ship3.Add(r1.ToString() + r2.ToString());
                }

            }
            ships.Add(r1.ToString() + r2.ToString());
            r2 += 1;
        }
    }

    private bool CheckHorizontal(int r1, int r2, int ship)
    {
        int a = r1; int b = r2;
        bool present = false;
        for (int i = 0; i < ship; i++)
        {
            if (ships.Contains(a.ToString() + b.ToString()))
            {
                present = true;
                break;
            }
            else
            {
                b += 1;
            }
        }
        return present;
    }

    private async Task Target(string id)
    {

        if (ships.Contains(id))
        {
            await JSRuntime.InvokeVoidAsync("Strike", id);
            int removeFromShips = ships.IndexOf(id);
            ships.RemoveAt(removeFromShips);
            if (ship1.Contains(id))
            {
                int removeFromindividual = ship1.IndexOf(id);
                ship1.RemoveAt(removeFromindividual);
                if (!ship1.Any())
                {
                    active1 = "hidden";
                    sunkMessage = "HMS Queen Elizabeth has been destroyed";
                    await JSRuntime.InvokeVoidAsync("Modal", "red");


                }
            }
            else if (ship2.Contains(id))
            {
                int removeFromindividual = ship2.IndexOf(id);
                ship2.RemoveAt(removeFromindividual);
                if (!ship2.Any())
                {
                    active2 ="hidden";
                    sunkMessage = "HMS Duncan has been destroyed";
                    await JSRuntime.InvokeVoidAsync("Modal", "red");

                }
            }
            else if (ship3.Contains(id))
            {
                int removeFromindividual = ship3.IndexOf(id);
                ship3.RemoveAt(removeFromindividual);
                if (!ship3.Any())
                {
                    active3 = "hidden";                    
                    sunkMessage = "HMS Defender has been destroyed";
                    await JSRuntime.InvokeVoidAsync("Modal", "red");

                }
            }

            if (!ships.Any())
            {
                
                sunkMessage = "Congrats, Your waters are clear from enemy ships";
                await JSRuntime.InvokeVoidAsync("VictoryModal", "green");

            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Miss", id);
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
